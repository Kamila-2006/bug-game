import random

SIZE = 7  # —Ä–∞–∑–º–µ—Ä –ø–æ–ª—è 7x7
NUM_LEAVES = 6  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ—á–∫–æ–≤
NUM_OBSTACLES = 5  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
NUM_BONUSES = 2  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤
MAX_TURNS = 26  # –º–∞–∫—Å–∏–º—É–º —Ö–æ–¥–æ–≤ –¥–æ –¥–æ–∂–¥—è


# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª—è
def create_board():
    board = [['.' for _ in range(SIZE)] for _ in range(SIZE)]
    leaves = set()
    obstacles = set()
    bonuses = set()

    # –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
    while len(obstacles) < NUM_OBSTACLES:
        x, y = random.randint(0, SIZE - 1), random.randint(0, SIZE - 1)
        if (x, y) != (0, 0) and (x, y) != (SIZE - 1, SIZE - 1):
            obstacles.add((x, y))

    # –õ–∏—Å—Ç–æ—á–∫–∏
    while len(leaves) < NUM_LEAVES:
        x, y = random.randint(0, SIZE - 1), random.randint(0, SIZE - 1)
        if (x, y) != (0, 0) and (x, y) != (SIZE - 1, SIZE - 1) and (x, y) not in obstacles:
            leaves.add((x, y))

    # –ë–æ–Ω—É—Å—ã
    while len(bonuses) < NUM_BONUSES:
        x, y = random.randint(0, SIZE - 1), random.randint(0, SIZE - 1)
        if (x, y) != (0, 0) and (x, y) != (SIZE - 1, SIZE - 1) and (x, y) not in obstacles and (x, y) not in leaves:
            bonuses.add((x, y))

    for (x, y) in obstacles:
        board[x][y] = 'üöß'
    for (x, y) in leaves:
        board[x][y] = '‚òòÔ∏è'
    for (x, y) in bonuses:
        board[x][y] = 'üéÅ'

    board[SIZE - 1][SIZE - 1] = 'üå≥'  # —É–∫—Ä—ã—Ç–∏–µ
    return board, leaves, obstacles, bonuses


# –ü–æ–ª–µ
def print_board(board, bug_pos):
    for i in range(SIZE):
        row = ''
        for j in range(SIZE):
            if (i, j) == bug_pos:
                row += 'üêû '
            else:
                row += board[i][j] + ' '
        print(row)
    print()

# –ü–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ
def move_bug(pos, direction):
    x, y = pos
    if direction == 'w' and x > 0:
        x -= 1
    elif direction == 's' and x < SIZE - 1:
        x += 1
    elif direction == 'a' and y > 0:
        y -= 1
    elif direction == 'd' and y < SIZE - 1:
        y += 1
    else:
        print("–ù–µ–ª—å–∑—è —Ç–∞–∫ —Ö–æ–¥–∏—Ç—å!")
    return (x, y)

# –ò–≥—Ä–∞
def game():
    board, leaves, obstacles, bonuses = create_board()
    bug_pos = (0, 0)
    turns = 0
    max_turns = MAX_TURNS
    print("–ò–≥—Ä–∞ ¬´–ñ—É—á–æ–∫ —Å–æ–±–∏—Ä–∞–µ—Ç –ª–∏—Å—Ç–æ—á–∫–∏¬ª")
    print("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: w - –≤–≤–µ—Ä—Ö, s - –≤–Ω–∏–∑, a - –≤–ª–µ–≤–æ, d - –≤–ø—Ä–∞–≤–æ")
    print("–°–æ–±–µ—Ä–∏ –≤—Å–µ –ª–∏—Å—Ç–æ—á–∫–∏ (‚òòÔ∏è) –∏ –¥–æ–±–µ—Ä–∏—Å—å –¥–æ —É–∫—Ä—ã—Ç–∏—è (üå≥) –¥–æ –¥–æ–∂–¥—è!")
    print(f"–ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω: –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è (üöß) –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å —Ö–æ–¥.")
    print(f"–ù–∞–π–¥–∏ –±–æ–Ω—É—Å (üéÅ), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å +2 —Ö–æ–¥–∞.")
    print_board(board, bug_pos)

    skip_next_turn = False

    while turns < max_turns:
        if skip_next_turn:
            print("–¢—ã –ø—Ä–æ–ø—É—Å–∫–∞–µ—à—å —Ö–æ–¥ –∏–∑-–∑–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è!")
            skip_next_turn = False
            turns += 1
            print(f"–•–æ–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–æ–∂–¥—è: {max_turns - turns}")
            continue

        move = input("–¢–≤–æ–π —Ö–æ–¥ (w/a/s/d): ").lower()
        if move not in ['w', 'a', 's', 'd']:
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë.")
            continue

        new_pos = move_bug(bug_pos, move)

        if new_pos == bug_pos:
            continue

        bug_pos = new_pos
        turns += 1

        if bug_pos in leaves:
            leaves.remove(bug_pos)
            print("–¢—ã —Å–æ–±—Ä–∞–ª –ª–∏—Å—Ç–æ—á–µ–∫!")
            board[bug_pos[0]][bug_pos[1]] = '.'

        elif bug_pos in obstacles:
            print("–û–π, —Ç—ã –Ω–∞—Ç–∫–Ω—É–ª—Å—è –Ω–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—à—å —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥!")
            skip_next_turn = True

        elif bug_pos in bonuses:
            print("–£—Ä–∞! –¢—ã –Ω–∞—à—ë–ª –±–æ–Ω—É—Å –∏ –ø–æ–ª—É—á–∏–ª +2 —Ö–æ–¥–∞!")
            max_turns += 2
            bonuses.remove(bug_pos)
            board[bug_pos[0]][bug_pos[1]] = '.'

        print_board(board, bug_pos)
        print(f"–û—Å—Ç–∞–ª–æ—Å—å –ª–∏—Å—Ç–æ—á–∫–æ–≤: {len(leaves)}. –•–æ–¥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–æ–∂–¥—è: {max_turns - turns}")

        if len(leaves) == 0:
            print("–í—Å–µ –ª–∏—Å—Ç–æ—á–∫–∏ —Å–æ–±—Ä–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –¥–æ–±–µ—Ä–∏—Å—å –¥–æ —É–∫—Ä—ã—Ç–∏—è.")

        if len(leaves) == 0 and bug_pos == (SIZE - 1, SIZE - 1):
            print("–¢—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±—Ä–∞–ª—Å—è –¥–æ —É–∫—Ä—ã—Ç–∏—è –∏ –≤—ã–∏–≥—Ä–∞–ª! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!")
            return

    if bug_pos == (SIZE - 1, SIZE - 1) and len(leaves) == 0:
        print("–¢—ã —É—Å–ø–µ–ª —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è –¥–æ –¥–æ–∂–¥—è! –ü–æ–±–µ–¥–∞!")
    else:
        print("–ù–∞—á–∞–ª—Å—è –¥–æ–∂–¥—å, –∏ —Ç—ã –Ω–µ —É—Å–ø–µ–ª –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —É–∫—Ä—ã—Ç–∏—è. –ü—Ä–æ–∏–≥—Ä—ã—à.")


if __name__ == "__main__":
    game()